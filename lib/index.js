'use strict';/**
 * fetch songs 
 * prompt for songs to download
 */var fetchSongs=function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(){var b,c,d,e,f,g;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return b=[],c=void 0,a.prev=2,d=new Spinner('retrieving lastest song.. %s'),d.setSpinnerString('|/-\\'),d.start(),a.next=8,getSongs(homePage);case 8:c=a.sent,d.stop(),process.stdout.write('\n\n'),a.next=16;break;case 13:a.prev=13,a.t0=a['catch'](2),console.log('there was an error retrieving songs');case 16:return e=c.map(function(a){return a.songTitle}),b.push({type:'list',name:'songs',message:'Please choose which latest song to download',choices:e,default:e[0]}),a.next=20,inquirer.prompt(b);case 20:return f=a.sent,g=c.find(function(a){return a.songTitle===f.songs}),a.abrupt('return',g);case 23:case'end':return a.stop();}},a,this,[[2,13]])}));return function(){return a.apply(this,arguments)}}(),downloadSong=function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(b){var c,d,e,f,g,h,i,j,k;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,fetchSongs(homePage);case 2:return c=a.sent,d=new Spinner('preparing to download song .. %s'),d.setSpinnerString('|/-\\'),d.start(),a.next=8,getSong(c.link);case 8:e=a.sent,f=e.downloadLink,g=e.title,d.stop(),process.stdout.write('\n\n'),h=path.resolve(b,g+'.mp3'),i=fs.createWriteStream(h),j={url:encodeURI(f),method:'GET',encoding:null},k=new ProgressBar,progress(request(j)).on('progress',function(a){var b=!1;b||(k.init(a.size.total),b=!0),k.update(a.size.transferred)}).on('error',function(a){return console.log(a)}).on('end',function(){return console.log('\n download completed')}).pipe(i);case 18:case'end':return a.stop();}},a,this)}));return function(){return a.apply(this,arguments)}}();/**
 * downloads the selected song
 * @todo allow batch downloads
 *//**
 * program starts here
 * checks if path is provided
 * if not use current directory
 * it checks also if provided path exists
 */function _asyncToGenerator(a){return function(){var b=a.apply(this,arguments);return new Promise(function(a,c){function d(e,f){try{var g=b[e](f),h=g.value}catch(a){return void c(a)}return g.done?void a(h):Promise.resolve(h).then(function(a){d('next',a)},function(a){d('throw',a)})}return d('next')})}}var _require=require('./scraper'),getSongs=_require.getSongs,getSong=_require.getSong,inquirer=require('inquirer'),fs=require('fs'),path=require('path'),request=require('request'),progress=require('request-progress'),ProgressBar=require('./progressBar'),Spinner=require('cli-spinner').Spinner,homePage='https://www.hitxgh.com/';function init(){var a=process.argv.slice(2).join(''),b=void 0;if(''===a)b=process.cwd(),downloadSong(b);else{b=a;try{fs.lstatSync(b).isDirectory(),downloadSong(b)}catch(a){console.log('path does not exists, kindly check well')}}}init();